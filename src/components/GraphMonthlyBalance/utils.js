import { firstDayOfNextMonth } from '../../utils/utils'

/**
* Calculate the average of values in an array
* @example
*   average( [ 4, 4, 5, 6, 6 ] ) // 5
* @param  {Array} arr - An array of integers or floats
* @return {Number}
*/
const average = arr => arr.reduce( ( p, c ) => p + c, 0 ) / arr.length

/**
* Parse the data for monthly balance graph. This function refill the empty data of every month and do an average of repeated months.
* @requires firstDayOfNextMonth
* @example
*   const data = [{"balance": 0,"date": "2014-11-01"},{"balance": 678.74,"date": "2014-12-01"},{"balance": 800.75,"date": "2015-01-01"},{"balance": 1189.88,"date": "2015-01-01"},{"balance": 8110.37,"date": "2015-03-01"}];
*   parseDataForGraph(data) // [ { date: '2014-11-01', balance: 0 }, { date: '2014-12-01', balance: 678.74 }, { date: '2015-01-01', balance: 995.32 }, { date: '2015-02-01' }, { date: '2015-03-01', balance: 8110.37 } ]
* @param  {Array.<Object>} data - An array of objects (the object must contain a date property. The array must be ordered in date ascendant)
* @param  {String} data.date - A valid date with this format '2018-03-01'. It is very important that all dates are on the first day of the month 
* @param  {float|integer} data.balance
* @return {Array.<Object>}
*/
function parseDataForGraph (data = []) {
	if (!data.length) {
		return []
	}

	// Get all dates in original data avoiding repeated information and refill with the missing dates
	const firstDate = data[0].date
	const lastDate = data[data.length - 1].date

	const listOfAllDates = [firstDate]
	while (listOfAllDates[listOfAllDates.length -1] !== lastDate) {
		const nextMonth = firstDayOfNextMonth(listOfAllDates[listOfAllDates.length -1])
		if (!listOfAllDates.includes(nextMonth)) {
			listOfAllDates.push(nextMonth)
		}
	}

	// For each date, calculate the balance.
	// A date should not necessarily have a balance. If exist more than one balance for the same month, do an average.
	const result = []
	listOfAllDates.forEach(date => {
		const monthlyData = {
			date: date
		}

		let allBalancesOnThisMonth = []
		data.forEach(d => {
			if (d.date === date) {
				allBalancesOnThisMonth.push(d.balance)
			}
		})

		if (allBalancesOnThisMonth.length) {
			const averagedBalanced = average(allBalancesOnThisMonth) || 0
			monthlyData.balance = parseFloat(averagedBalanced.toFixed(2))
		}

		result.push(monthlyData)
	})

	return result
}

/**
 * If receive at least 12 months of already parsed monthly balance for graph, return the data of last year. 
 * @requires parseDataForGraph
 * @param {Object[]} [dataParsedForGraph=[]] - Array of objects generated by parseDataForGraph function
 * @param {string} dataParsedForGraph[].date - A valid date with this format '2018-03-01'
 * @param {float|integer} [dataParsedForGraph[].balance] - Amount of balance
 * @returns {Array.<Object>|Array}
 */
function getLastYearData (dataParsedForGraph = []) {
	const monthsInAYear = 12

	if (dataParsedForGraph.length < monthsInAYear || !Array.isArray(dataParsedForGraph)) {
		return []
	}

	const lastTwelveMonths = dataParsedForGraph.slice(Math.max(dataParsedForGraph.length - monthsInAYear, 0))

	return lastTwelveMonths
}

export {
	parseDataForGraph, 
	getLastYearData,
}
